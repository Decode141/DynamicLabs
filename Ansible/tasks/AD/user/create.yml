---
# 
# Creates a domain user 
#
# Parameters:
# name = user name (required)
# passowrd = user password. Autogenerated if not specified.
# enabled = yes (default), no
# description = user description
# first_name = First Name
# last_name = Last Name
# home_directory = path to home directory
# ou = organisational unit container path (only set a creation time) 
# user_account_control = Manually set the UAC value in HEX. Warning: Other features might change this value, for example when configuring delegation or
#                        setting an account as disabled, or setting the password as "don't expire".
#                        See values at https://docs.microsoft.com/en-us/troubleshoot/windows-server/identity/useraccountcontrol-manipulate-account-properties
#                        Examples:
#                        "0x200" = (NORMAL_ACCOUNT) 
#                        "0x10200" = (NORMAL_ACCOUNT|DONT_EXPIRE_PASSWORD)
#                        "0x10220" = (NORMAL_ACCOUNT|DONT_EXPIRE_PASSWORD|PASSWD_NOTREQD)
#
# Examples:
#            {
#                name = "AD_User"                
#                value = [    
#                    { name = "user1"}, # User1 with random password (stored at ~/credentials/domain/dynamic.lab/user1)
#                    { name = "user2", password = "Welcome123"}, # User2 with predefined password
#                    { # support user, created in a specific OU, with a specific home directory, no password required.
#                        name = "support", 
#                        password = "Welcome123",
#                        description = "IT Support User",
#                        first_name = "John",
#                        last_name = "Smith",
#                        home_directory = "\\file\home$\support",
#                        ou = "OU=ThirdParty,DC=dynamic,DC=lab",
#                        user_account_control = "0x10220", # (NORMAL_ACCOUNT|DONT_EXPIRE_PASSWORD|PASSWD_NOTREQD)
#                      }
#                ]
#            }
# 

# Save the user password 

- set_fact:
    user_password: "{{ item.password }}"
  when: item.password is defined

- local_action:
    module: file
    path: "{{ '~/credentials/domain/' + ansible_domain }}"
    state: directory
  when: item.password is defined

- local_action:
    module: copy
    dest: "{{ '~/credentials/domain/' + ansible_domain + '/' + item.name }}"
    content: "{{ item.password }}"
  when: item.password is defined

- set_fact:
    user_password: "{{ lookup('password', '~/credentials/domain/' + ansible_domain + '/' + item.name + ' chars=ascii_letters,digits,punctuation length=12') }}"
  when: item.password is not defined

# No OU Specified
- win_domain_user:
    name: "{{ item.name }}"
    upn: "{{ item.name + '@' + ansible_domain }}"
    password: "{{ user_password }}"
    password_never_expires: "{{ item.password_never_expires | default('yes') }}"
    enabled: "{{ item.enabled | default('yes') }}"
    state: present
    groups: Domain Users
  when: item.ou is not defined

# OU Specified
- win_domain_user:
    name: "{{ item.name }}"
    upn: "{{ item.name + '@' + ansible_domain }}"
    password: "{{ user_password }}"
    password_never_expires: "{{ item.password_never_expires | default('yes') }}"
    enabled: "{{ item.enabled | default('yes') }}"
    path: "{{ item.ou }}"
    state: present
    groups: Domain Users
  when: item.ou is defined

# win_domain_user module does not handle empty strings correctly
# see https://github.com/ansible-collections/community.windows/issues/18
# What follows is a workaround

# Set Firstname
- win_domain_user:
    name: "{{ item.name }}"
    firstname: "{{ item.first_name }}"
  when: item.first_name is defined

# Set Lastname
- win_domain_user:
    name: "{{ item.name }}"
    surname: "{{ item.last_name }}"
  when: item.last_name is defined

# Set Description
- win_domain_user:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
  when: item.description is defined

  # Set Home Directory
- win_domain_user:
    name: "{{ item.name }}"
    attributes:
        homeDirectory: "{{ item.home_directory }}"
  when: item.home_directory is defined

- name: Prints two lines of messages, but only if there is an environment value set
  ansible.builtin.debug:
    msg:
    - "{{ item.user_account_control | int }}"
  when: item.user_account_control is defined

# Set User Account Control UAC
- win_domain_user:
    name: "{{ item.name }}"
    attributes:
        userAccountControl: "{{ item.user_account_control | int(base=16) }}"
  when: item.user_account_control is defined
